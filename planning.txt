Game server starts Game
Game server creates server socket and starts listening
A player connects
Game server creates new player handler. Player handler has two threads: game thread and notifications
game server creates new player and gives player its player handler
game server starts new thread for player's player handler

game thread receives requests from socket and converts to commands
game thread sends commands to game and receives results
game thread converts results to responses and send to socket

game has event manager
event manager generates events: syn and async
player listen to events generated by game's event manager
game thread subscribes to syc events
notifications thread subscribes to asyn events

event manager has map: subject to list of listeners
event manager generates events. event has subject (consts), data (specific for each event). inheritance for specific events
event manager can notify all or notify single listener
syncNotify calls listerner's process event
asyncNotify calls listener's queue event
event manager provides subscribe(subject, eventlistener) and unsubscribe(subject, eventlistener) and unsubscribe(eventlistener)

eventlistener provides processEvent(event)
eventlistener provides queuEvent(Event)
eventlistener provides processEventQueue()

player has eventhandlermanager
eventhandlermanager has map of eventsubject to eventhandler. one eventhandler for each subject
eventmanager provides access to eventlistener methods: processevent(event)

player listens an event
player checks event type (sync, async)
player sends sync events to playerhandler's game thread
player sends async events to player handler's notifications thread
OR
Each thread in playerhandler has an instance of the player
game thread filters for sync events
notifications thread filters for async events
