package client.gui;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import client.event.Event;
import client.event.Subject;
import client.observer.Observable;
import client.observer.Observer;

/**
 * A panel that displays information on the application's main window.
 * It generates events from its contents and consumes events for its contents.
 * By default, it doesn't process any events. Inherited classes should override the processEvent() method.
 * GUI content classes can extend ContentPanel to install their own components.
 */
public abstract class ContentPanel extends Observable implements Observer
{
    protected JPanel content = new JPanel(); // the content panel's container

    /**
     * Default constructor.
     */
    public ContentPanel()
    {}

    /**
     * Constructor.
     * Sets a name for the content panel.
     * 
     * @param name the identifying name for the content panel
     */
    public ContentPanel(String name)
    {
        super(name);
    }

    // Setters and Getters
    public JPanel getContent() { return content; }

    @Override
    public synchronized void processEvent(Event event)
    {}

    /**
     * Retrieves the list of event subjects the content panel is interested in listening to.
     * 
     * @return the list of event subjects consumed by the content panel
     */
    public List<Subject> getSubjectsConsumed()
    {
        return new ArrayList<Subject>();
    }

    /**
     * Retrieves the list of event subjects the content panel generates.
     * 
     * @return the list of event subjects generated by the content panel
     */
    public List<Subject> getEventsProduced()
    {
        return new ArrayList<Subject>();
    }
}
