package server.game;

import java.io.File;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.ConcurrentHashMap;

import server.command.Action;
import server.command.Command;
import server.command.Result;
import server.command.ResultCode;
import server.commandhandler.CommandHandlerManager;
import server.commandhandler.LoginCommandHandler;
import server.commandhandler.MapCommandHandler;
import server.commandhandler.MessageCommandHandler;
import server.commandhandler.MoveCommandHandler;
import server.commandhandler.PlayersCommandHandler;
import server.commandhandler.QuitCommandHandler;
import server.event.Subject;
import server.eventmanager.EventManager;

/**
 * An instance of the Octothorpe Game.
 */
public class Game
{
    private server.game.GameMap map = null;                                                // the map used in the game
    private Map<String, Player> players = new ConcurrentHashMap<String, Player>();  // list of players in the game
    private CommandHandlerManager handlers = new CommandHandlerManager();           // command handler manager
    private EventManager eventManager = new EventManager();                         // list of event managers
    
    /**
     * Constructor.
     * Initializes the game map.
     * Installs command handlers.
     * 
     * @param mapFile the file containing the map information
     */
    public Game(File mapFile)
    {
        map = new server.game.GameMap(mapFile);
        installCommandHandlers();
        registerEvents();
    }
    
    /**
     * Processes a command, returning a result with the outcome of the command processing.
     * 
     * @param command the command to be processed
     * @return A Result containing the outcome of the command
     */
    public Result processCommand(Command command)
    {
        Result result = new Result();
        result.setPlayer(command.getPlayer().getName());
        if (handlers.getCommandHandler(command.getAction()) == null)
        {
            result.setResultCode(ResultCode.BadRequest);
            result.setMessage("Error. Cannot process request.");
        }
        else
            handlers.getCommandHandler(command.getAction()).processCommand(command, result);
        return result;
    }

    // run the game
    public void run()
    {
        try (Scanner sc = new Scanner(System.in))
        {
            Command command = null;
            while ((command = new Command(sc.nextLine())) != null)
            {
                Result result = new Result();
                result.setPlayer(command.getPlayer().getName());
                if (handlers.getCommandHandler(command.getAction()) == null)
                {
                    result.setResultCode(ResultCode.ServerError);
                    result.setMessage("Error. Cannot execute command.");
                }
                else
                    handlers.getCommandHandler(command.getAction()).processCommand(command, result);
                System.out.println(result);
            }
        }
    }

    // Installs command handlers for the game.
    private void installCommandHandlers()
    {
        handlers.installCommandHandler(Action.Login, new LoginCommandHandler(players, map, eventManager));
        handlers.installCommandHandler(Action.Map, new MapCommandHandler(map, eventManager));
        handlers.installCommandHandler(Action.Message, new MessageCommandHandler(eventManager));
        handlers.installCommandHandler(Action.Move, new MoveCommandHandler(map, eventManager));
        handlers.installCommandHandler(Action.Players, new PlayersCommandHandler(players, eventManager));
        handlers.installCommandHandler(Action.Quit, new QuitCommandHandler(players, eventManager));
    }

    // Register events generated by the game.
    private void registerEvents()
    {
        eventManager.registerSubject(Subject.ItemCollected);
        eventManager.registerSubject(Subject.ItemData);
        eventManager.registerSubject(Subject.MapData);
        eventManager.registerSubject(Subject.PlayerConnected);
        eventManager.registerSubject(Subject.PlayerDisconnected);
        eventManager.registerSubject(Subject.PlayerUpdate);
        eventManager.registerSubject(Subject.SendMessage);
    }
}
