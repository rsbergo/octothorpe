package server.eventmanager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logger.LogLevel;
import logger.Logger;
import server.event.Event;
import server.event.Subject;

/**
 * Generates events of subjects that have been registered.
 * Supports multiple event subjects.
 * Event listeners can subscribe to events generated by an event manager.
 * Multiple listeners can subscribe to an event subject.
 * A listener can subscribe to multiple event subjects.
 */
public class EventManager
{
    private Map<Subject, List<EventListener>> registrar = new HashMap<Subject, List<EventListener>>(); // listeners
    
    /**
     * Adds the subject specified to the list of event subjects generated by this event manager.
     * The event manager can start accepting subscriptions for the new subject.
     * 
     * @param subject the subject to be added to this event manager
     */
    public void registerSubject(Subject subject)
    {
        Logger.log(LogLevel.Info, "Registering event subject: " + subject);
        registrar.putIfAbsent(subject, new ArrayList<EventListener>());
    }
    
    /**
     * Removes the subject specified from the list of event subjects generated by this event manager.
     * The event manager stops accepting subscriptions for the subject removed and stops notifying listeners of events
     * with the subject removed.
     * All subscribers are removed for the event.
     * 
     * @param subject the subject to be unregistered
     */
    public void unregisterSubject(Subject subject)
    {
        Logger.log(LogLevel.Debug, "Unregistering event subject: " + subject);
        registrar.remove(subject);
    }
    
    /**
     * Subscribes listener to all events generated by the event manager.
     * 
     * @param listener the event listener to be subscribed to events generated
     */
    public void subscribe(EventListener listener)
    {
        for (Subject subject : registrar.keySet())
        {
            Logger.log(LogLevel.Debug, "New event listener subscription: " + subject);
            registrar.get(subject).add(listener);
        }
    }

    /**
     * Subscribes listener to events generated by the event manager.
     * Listener will only be notified of events with the subject specified.
     * 
     * @param subject  the subject the new listener is listening to
     * @param listener the listener that will listen to this event manager's events
     */
    public void subscribe(Subject subject, EventListener listener)
    {
        Logger.log(LogLevel.Debug, "New event listener subscription: " + subject);
        if (registrar.containsKey(subject))
            registrar.get(subject).add(listener);
    }
    
    /**
     * Unsubscribes listener from all events generated by the event manager.
     * 
     * @param listener the event listener to be unsubscribed from events generated
     */
    public void unsubscribe(EventListener listener)
    {
        for (Subject subject : registrar.keySet())
        {
            Logger.log(LogLevel.Debug, "Event listener unsubscribed for " + subject);
            registrar.get(subject).remove(listener);
        }
    }
    
    /**
     * Unsubscribes listener from events of the subject specfied.
     * 
     * @param subject  the subject the event listener is unsubscribing from
     * @param listener the event listener unsubscribing
     */
    public void unsubscribe(Subject subject, EventListener listener)
    {
        Logger.log(LogLevel.Debug, "Event listener unsubscribed for " + subject);
        if (registrar.containsKey(subject))
            registrar.get(subject).remove(listener);
    }

    /**
     * Notifies the event specified to all event listeners listening to this event manager's events.
     * 
     * @param event the event to be notified
     */
    public void notify(Event event)
    {
        Logger.log(LogLevel.Debug, "Notifying event listeners: \"" + event + "\"");
        if (registrar.containsKey(event.getSubject()))
        {
            for (EventListener listener : registrar.get(event.getSubject()))
                listener.processEvent(event);
        }
    }
    
    /**
     * Notifies the event specified to the event listener specified.
     * Only notifies listener if it has subscribed to the event's subject
     * 
     * @param listener the event listener to be notified
     * @param event    the event to be notified
     */
    public void notify(EventListener listener, Event event)
    {
        Logger.log(LogLevel.Debug, "Notifying event listener: \"" + event + "\"");
        if (registrar.containsKey(event.getSubject()) /*&& registrar.get(event.getSubject()).contains(listener)*/)
            listener.processEvent(event);
    }
}
